// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Employee {
  id            String    @id @default(uuid())
  employee_id   String    @unique
  name          String
  position      String
  department    String
  status        String
  joining_date  DateTime
  basic_salary  Float
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  salaries      Salary[]
  tasks         Task[]
}

model Salary {
  id            String    @id @default(uuid())
  employee_id   String
  year          Int
  month         Int
  bonus         Float     @default(0)
  deductible    Float     @default(0)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  employee      Employee  @relation(fields: [employee_id], references: [employee_id])

  @@unique([employee_id, year, month])
  @@index([employee_id])
  @@index([year, month])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("active") // active, completed, archived
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  tasks       Task[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  priority    String    @default("medium") // low, medium, high
  status      String    @default("todo") // todo, in_progress, completed
  project_id  String
  project     Project   @relation(fields: [project_id], references: [id], onDelete: Cascade)
  assigned_to String?
  employee    Employee? @relation(fields: [assigned_to], references: [employee_id])
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([project_id])
  @@index([assigned_to])
}
